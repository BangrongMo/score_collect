from fabric import group
from fabric import Connection
from fabric import runners
from shell import shell
from fabric.exceptions import GroupException

my_hosts = []
for hosts_ip in range(3,6):
    my_hosts.append('192.168.{0}.221'.format(hosts_ip))
# print(my_hosts)
hosts_score = {}
for host_name in my_hosts:
    hosts_score[host_name] = []

# print(hosts_score)
# print(my_hosts)
con_group = [Connection(host=host,user='root',connect_kwargs = {'password':'redhat'},connect_timeout = 1) for host in my_hosts]
gp1 = group.ThreadingGroup.from_connections(con_group)

#reboot target host
#check httpd service
try:
    for hostsB,hostsB_list in hosts_score.items():
        httpd1 = shell('curl {0} -m 1'.format(hostsB))
        # print(re2.output())
        print(hostsB,httpd1.output())

        if httpd1.output() == ['ok']:
            hosts_score[hostsB].append(5)
        else :
            hosts_score[hostsB].append(0)

except Exception as all_exception:
        print(all_exception)
        print(type(all_exception))

#check sshd port 2200
try:
    ssh1 = gp1.run('id',warn = True)
except GroupException as no_conn:

    ssh1 = no_conn.result

except Exception as all_exception:
        print(all_exception)
        print(type(all_exception))

for conni,result in ssh1.items():
    # print("{0.host}:{1.stdout}".format(conni,result))
    if isinstance(result,runners.Result):
        if result.exited == 0:
           hosts_score[conni.host].append(2)

    else:
        hosts_score[conni.host].append(0)
        print('can not connect to {0.host} ,{1}'.format(conni,result))
    print('{0.host} get score {1}'.format(conni,hosts_score[conni.host]))
    print('##################')


#check firewwall rich
try:
    firewall1 = gp1.run('firewall-cmd --list-all |grep 192.168.',warn = True)
except GroupException as no_conn:

    firewall1 = no_conn.result

except Exception as all_exception:
        print(all_exception)
        print(type(all_exception))

for conni,result in firewall1.items():
    # print("{0.host}:{1.stdout}".format(conni,result))
    if isinstance(result,runners.Result):
        if 'accept' in str(result):
           hosts_score[conni.host].append(2)
        else:
            hosts_score[conni.host].append(0)

    else:
        hosts_score[conni.host].append(0)

        print('can not connect to {0.host} ,{1}'.format(conni,result))
    print('{0.host} get score {1}'.format(conni,hosts_score[conni.host]))
    print('##################')

#check permit root login
try:
    ssh2 = gp1.run('sudo cat /etc/ssh/sshd_config |grep PermitRootLogin|grep -v \#' ,warn = True)
except GroupException as no_conn:

    ssh2 = no_conn.result

except Exception as all_exception:
        print(all_exception)
        print(type(all_exception))

for conni,result in ssh2.items():
    # print("{0.host}:{1.stdout}".format(conni,result))
    if isinstance(result,runners.Result):
        if 'no' in str(result):
           hosts_score[conni.host].append(1)

    else:
        hosts_score[conni.host].append(0)
        print('can not connect to {0.host} ,{1}'.format(conni,result))
    print('{0.host} get score {1}'.format(conni,hosts_score[conni.host]))
    print('##################')

#check x permission
try:
    x_per = gp1.run('sudo /usr/local/bin/print.sh' ,warn = True)
except GroupException as no_conn:

    x_per = no_conn.result

except Exception as all_exception:
        print(all_exception)
        print(type(all_exception))

for conni,result in x_per.items():
    # print("{0.host}:{1.stdout}".format(conni,result))
    if isinstance(result,runners.Result):
        if 'sbin' in str(result):
           hosts_score[conni.host].append(5)
        else:
           hosts_score[conni.host].append(0)

    else:
        hosts_score[conni.host].append(0)
        print('can not connect to {0.host} ,{1}'.format(conni,result))
    print('{0.host} get score {1}'.format(conni,hosts_score[conni.host]))
    print('##################')

#final_score
for hostname,fin_score in hosts_score.items():
    print('{0} get {1},final score is {2}'.format(hostname,fin_score,sum(fin_score)))
    #print('2nd score is {0}'.format(fin_score[2]))
